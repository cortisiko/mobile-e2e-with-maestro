name: Setup Android Emulator
run-name: ${{ github.actor }} is testing setting up an emulator on GitHub Actions ðŸš€
on:
  pull_request:
    types: [labeled]
jobs:
  create-emulator:
    if: contains(github.event.pull_request.labels.*.name, 'create-emulator')
    runs-on: macos-latest
    steps:
      - name: Install JDK
        run: |
          brew install openjdk@17
          echo 'export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile
          java -version  # Verify Java installation

      - name: Setup Android SDK
        run: |
          # Create directory structure
          mkdir -p $HOME/Android/sdk/cmdline-tools
          cd $HOME/Android/sdk

          curl -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip
          unzip cmdline-tools.zip
          
          # Prepare correct directory structure
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ || true
          
          # Remove duplicate directory if it exists
          if [ -d cmdline-tools/latest/cmdline-tools ]; then
            rm -rf cmdline-tools/latest/cmdline-tools
          fi
          
          # Set environment variables for future steps
          echo "ANDROID_HOME=$HOME/Android/sdk" >> $GITHUB_ENV
          echo "$HOME/Android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/Android/sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android components
        run: |
          echo "Checking available SDK tools..."
          ls -la $ANDROID_HOME/cmdline-tools/latest/bin
          
          echo "Listing currently installed packages..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          
          echo "Installing core components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "emulator" "platform-tools"
          
          echo "Installing Android platform..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-32"
          
          echo "Installing system image (this may take a while)..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-32;google_apis;x86_64"
          
          echo "Accepting licenses with proper method..."
          for i in {1..10}; do echo y; done | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          
          echo "Verifying system image installation..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images"
          ls -la $ANDROID_HOME/system-images || echo "Still no system-images directory"

      - name: Debug system images
        run: |
          echo "Android home: $ANDROID_HOME"
          echo "Available system image directories:"
          find $ANDROID_HOME/system-images -type d -maxdepth 2 || echo "No system-images directory found"
          
          echo "List all valid system images:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images" || echo "No system images found"

      - name: Create Emulator Image
        run: |
          # List available devices
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list device
          
          echo "Checking for available images before creating AVD..."
          AVAILABLE_IMAGES=$($ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images" | head -1 | awk -F'|' '{print $1}' | xargs)
          
          if [ -z "$AVAILABLE_IMAGES" ]; then
            echo "No system images available. Using a fallback approach with API 29..."
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-29;google_apis;x86_64"
            SYSTEM_IMAGE="system-images;android-29;google_apis;x86_64"
          else
            echo "Using available system image: $AVAILABLE_IMAGES"
            SYSTEM_IMAGE=$AVAILABLE_IMAGES
          fi
          
          # Create the AVD with full path to avdmanager
          echo "Creating AVD with image: $SYSTEM_IMAGE"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name test_device \
            --package "$SYSTEM_IMAGE" \
            --device "pixel_6"
          
          # Test that emulator was created
          echo "Checking if AVD was created successfully:"
          ls -la $HOME/.android/avd/